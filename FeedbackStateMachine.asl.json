{
  "Comment": "State machine to handle test generation with feedback",
  "StartAt": "Analyze",
  "States": {
    "Analyze": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:eu-south-1:344740472567:function:analyzeReport2"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Generate"
    },
    "Generate": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:eu-south-1:344740472567:function:generateTest2"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "CodeBuild StartBuild"
    },
    "CodeBuild StartBuild": {
      "Type": "Task",
      "Resource": "arn:aws:states:::codebuild:startBuild.sync",
      "Parameters": {
        "ProjectName": "FeedbackBuildProject",
        "SourceVersion.$": "$.body.branch"
      },
      "ResultSelector": {
        "BuildStatus.$": "$.Build.BuildStatus",
        "BuildId.$": "$.Build.Id",
        "Logs.$": "$.Build.Logs.DeepLink",
        "ArtifactLocation.$": "$.Build.Artifacts.Location"
      },
      "ResultPath": "$.buildResult",
      "Next": "Success Choice",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Success Choice"
        }
      ]
    },
    "Success Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.buildResult.BuildStatus",
          "StringEquals": "SUCCEEDED",
          "Next": "Build Success"
        },
        {
          "Variable": "$.buildResult.BuildStatus",
          "StringEquals": "FAILED",
          "Next": "Build Failure"
        }
      ],
      "Default": "Unknown State"
    },
    "Build Success": {
      "Type": "Task",
      "Resource": "arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${LambdaHumanApprovalSendEmailFunction.Arn}",
        "Payload": {
          "ExecutionContext.$": "$$",
          "APIGatewayEndpoint": "https://${ExecutionApi}.execute-api.${AWS::Region}.amazonaws.com/states",
          "ArtifactLocation.$": "$.buildResult.ArtifactLocation"
        }
      },
      "Next": "ManualApprovalChoiceState"
    },
    "ManualApprovalChoiceState": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Status",
          "StringEquals": "Approved!",
          "Next": "ApprovedPassState"
        },
        {
          "Variable": "$.Status",
          "StringEquals": "Rejected!",
          "Next": "RejectedPassState"
        }
      ]
    },
    "ApprovedPassState": {
      "Type": "Pass",
      "End": true
    },
    "RejectedPassState": {
      "Type": "Pass",
      "End": true
    },
    "Build Failure": {
      "Type": "Fail"
    },
    "Unknown State": {
      "Type": "Fail",
      "Error": "UnknownBuildStatus",
      "Cause": "The build returned an unknown status."
    }

  }
}