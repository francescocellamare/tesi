AWSTemplateFormatVersion: '2010-09-09'
Description: Template for CloudFormation demo example

Parameters:
  IAMUser:
    Type: String
    Description: The ARN of the IAM user (e.g., arn:aws:iam::123123123123:user/myuid).
    Default: arn:aws:iam::344740472567:user/f.cellamare

  Email:
    Type: String
    AllowedPattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
    ConstraintDescription: Must be a valid email address.
    Default: francesco.pio.cellamare28@gmail.com

  # ==== CodeCommit ====
  BranchName:
    Description: CodeCommit branch name
    Type: String
    Default: master
  RepositoryName:
    Description: CodeComit repository name
    Type: String
    Default: SpringProjectRepository

  # ==== CodeBuild ====
  ProjectName:
    Description: CodeBuild project name
    Type: String
    Default: DemoCodeBuildCloudFormation

  # ==== Event Bus ====
  EventBusName:
    Description: Event bus name
    Type: String
    Default: DemoEventBusCloudFormation

  # ==== EC2 ====
  InstanceName:
    Description: EC2 instance name
    Type: String
    Default: DemoEC2CloudFormation
  InstanceTypeValue:
    Description: EC2 instance Type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
    ConstraintDescription: Must be a valid EC2 instance type

  # ==== Network ====
  VPCName:
    Description: VPC name
    Type: String
    Default: DemoVPCCloudFormation
  SubnetName:
    Description: Subnet name
    Type: String
    Default: DemoSubnetCloudFormation
  IgwName:
    Description: Internet Gateway name
    Type: String
    Default: DemoIgwCloudFormation
  RoutingTableName:
    Description: Routing table name
    Type: String
    Default: DemoRoutingTableCloudFormation

  # ==== CodePipeline ====
  PipelineName:
    Description: CodePipeline pipeline name
    Type: String
    Default: DemoPipeline

  # ==== Bucket ====
  BucketName:
    Description: Bucket name
    Type: String
    Default: demo-bucket-cloudformation

  # ==== NetworkInterface ====
  MyIPAddress:
    Description: The IP address allowed to access SSH and HTTP ports (e.g., your IP)
    Type: String
    Default: 0.0.0.0/0 # Replace with a specific IP for more security, e.g., "192.0.2.0/32"
    AllowedPattern: (\d{1,3}\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: Must be a valid IP address with CIDR notation (e.g., x.x.x.x/32).


  # ==== ECS ====
  ServiceName:
    Type: String
    Default: spring-boot-service

  ContainerPort:
    Type: Number
    Default: 8080

  ContainerCpu:
    Type: String
    Default: 128

  ContainerMemory:
    Type: String
    Default: 1GB

  HealthCheckPath:
    Type: String
    Default: /

  MinContainers:
    Type: Number
    Default: 1

Resources:
  # ==== EventBridge section ====

  EventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: eb-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref PipelineName ] ] 

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to filter out pull request"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref RepositoryName ] ]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - tag
          referenceName:
              - "GENERATE"
      Targets:
        -
          Arn: 
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref PipelineName ] ]
          RoleArn: !GetAtt EventRole.Arn
          Id: codepipeline-PipelineName

  # ================================================================================================

  # ==== CodePipeline section ====

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSStepFunctionsConsoleFullAccess
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: "*"
                Condition:
                  StringEqualsIfExists:
                    "iam:PassedToService":
                      - "cloudformation.amazonaws.com"
                      - "elasticbeanstalk.amazonaws.com"
                      - "ec2.amazonaws.com"
                      - "ecs-tasks.amazonaws.com"

              - Effect: Allow
                Action:
                  - "codecommit:CancelUploadArchive"
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:GetRepository"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:UploadArchive"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplication"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "codestar-connections:UseConnection"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "elasticbeanstalk:*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "cloudwatch:*"
                  - "s3:*"
                  - "sns:*"
                  - "cloudformation:*"
                  - "rds:*"
                  - "sqs:*"
                  - "ecs:*"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:ListFunctions"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "opsworks:CreateDeployment"
                  - "opsworks:DescribeApps"
                  - "opsworks:DescribeCommands"
                  - "opsworks:DescribeDeployments"
                  - "opsworks:DescribeInstances"
                  - "opsworks:DescribeStacks"
                  - "opsworks:UpdateApp"
                  - "opsworks:UpdateStack"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "cloudformation:CreateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:SetStackPolicy"
                  - "cloudformation:ValidateTemplate"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuildBatches"
                  - "codebuild:StartBuildBatch"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "devicefarm:ListProjects"
                  - "devicefarm:ListDevicePools"
                  - "devicefarm:GetRun"
                  - "devicefarm:GetUpload"
                  - "devicefarm:CreateUpload"
                  - "devicefarm:ScheduleRun"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "servicecatalog:ListProvisioningArtifacts"
                  - "servicecatalog:CreateProvisioningArtifact"
                  - "servicecatalog:DescribeProvisioningArtifact"
                  - "servicecatalog:DeleteProvisioningArtifact"
                  - "servicecatalog:UpdateProduct"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "cloudformation:ValidateTemplate"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "ecr:DescribeImages"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "states:DescribeExecution"
                  - "states:DescribeStateMachine"
                  - "states:StartExecution"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "appconfig:StartDeployment"
                  - "appconfig:StopDeployment"
                  - "appconfig:GetDeployment"
                Resource: "*"

              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'

              - Effect: Allow
                Action:
                  - codecommit:*
                Resource:
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${BucketName}/*
                  - '*'
              - Effect: Allow
                Action:
                  - codebuild:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - codedeploy:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - elasticbeanstalk:*
                  - elasticloadbalancing:*
                  - ec2:*
                  - sqs:*
                  - opsworks:*
                  - devicefarm:*
                  - servicecatalog:*
                Resource: '*'

  PipelineInstance:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref PipelineName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                OutputArtifactFormat: CODEBUILD_CLONE_REF
                RepositoryName: !Ref RepositoryName
                BranchName: !Ref BranchName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: PreBuild
          Actions:
            - Name: PreBuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: DeployOutput
              Configuration:
                ProjectName: !Ref ProjectName
              RunOrder: 2
              Namespace: BuildVariables
        - Name: StateMachine
          Actions:
            - Name: FeedbackStateMachine
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: StepFunctions
                Version: '1'
              Configuration:
                StateMachineArn: !GetAtt FeedbackStateMachine.Arn
                Input: !Sub |
                          {
                            "bucketname": "${BucketName}",
                            "key": "${PipelineName}/DeployOutp/",
                            "buildResult": "#{BuildVariables.BUILD_STATUS}",
                            "branch": "${BranchName}"
                          }
              InputArtifacts:
                - Name: DeployOutput
              OutputArtifacts:
                - Name: MergedDeployOutput
              RunOrder: 3
        - Name: Deploy
          Actions:
            - Name: ECSDeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              InputArtifacts:
                - Name: MergedDeployOutput
              Configuration:
                ClusterName: spring-boot-app
                ServiceName: backend-service
                FileName: output.json
              RunOrder: 4

  # ================================================================================================

  # ==== S3 buckets section ====

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      Tags:
        - Key: Name
          Value: !Ref BucketName
      AccessControl: Private

  ArtifactStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactStoreBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: FullAccessForIAMUser
            Effect: Allow
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${BucketName}
              - !Sub arn:aws:s3:::${BucketName}/*
            Principal:
              AWS: !Ref IAMUser

  # ================================================================================================

  # ==== CodeBuild section ====

  # Project for first time build
  CodeBuildInstance:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        EncryptionDisabled: true
        OverrideArtifactName: true
        Type: CODEPIPELINE
      BadgeEnabled: false
      ConcurrentBuildLimit: '1'
      Description: Demo build stage inside the pipeline
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL # computation power type at https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codebuild-project-environment.html#cfn-codebuild-project-environment-certificate
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      Name: !Ref ProjectName
      QueuedTimeoutInMinutes: '5' # [5, 480]
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            shell: /bin/bash
            exported-variables:
              - BUILD_STATUS
              
          phases:
            install:
              on-failure: ABORT
              commands:
                - echo "Inline buildspec"
                - echo "Setting JAVA_HOME to Java 17"
                - export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
                - echo $JAVA_HOME
                - echo "Installing dependencies"
                - echo "Checking Java version"
                - java -version
                - mvn -v

            pre_build:
              on-failure: ABORT
              commands:
                - echo "Cleaning up previous artifacts..."
                - aws s3 rm s3://${BucketName}/DemoPipeline/DeployOutp --recursive
                - aws s3 rm s3://${BucketName}/DemoPipeline/ReportOutp --recursive
                - aws s3 rm s3://${BucketName}/build-artifacts --recursive
                - aws s3 rm s3://${BucketName}/stats --recursive
                - echo "Starting the build process"
                - mvn clean validate -q

            build:
              on-failure: ABORT
              commands:
                - echo "Compiling the Spring Boot project"
                - mvn clean compile -q

            post_build:
              on-failure: CONTINUE
              commands:
                - echo "Running the test suite"
                - mvn test -q && export BUILD_STATUS="SUCCEEDED" || export BUILD_STATUS="FAILED"
                - echo "Tests completed"
                - echo "Uploading Surefire reports to S3"
                - zip -r FeedbackBuildArtifacts.zip target/surefire-reports/
                - aws s3 cp FeedbackBuildArtifacts.zip s3://${BucketName}/build-artifacts/
                - echo "Uploaded Surefire reports"
                - git show --name-status HEAD > report.txt
                - cat report.txt
                - echo "Generated report"
                - echo "Building the Spring Boot project"
                - mvn clean package -q -DskipTests
                - jdeps --recursive -verbose:class target/classes/ | grep -E "^(\s)*com\.example.demo(.)*classes$" | tr -s " " | rev | cut -d' ' -f2- | rev > deps.txt
                - aws s3 cp deps.txt s3://${BucketName}/deps/
                - echo "Ending"

          artifacts:
            files:
              - '**/*'
            name: DeployOutput
            secondary-artifacts:
              ReportOutput:
                files:
                  - report.txt
                name: ReportOutput
                discard-paths: yes
              DeployOutput:
                files:
                  - target/*.jar
                name: DeployOutput
                discard-paths: no
      Tags:
        - Key: Name
          Value: !Ref ProjectName

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
      Path: /
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}
                  - '*'

  CodeBuildFeedbackInstance:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: S3
        Location: !Ref ArtifactStoreBucket
        Path: build-artifacts/
        Packaging: ZIP
        Name: FeedbackBuildArtifacts.zip
      ConcurrentBuildLimit: '1'
      Description: Build stage inside the state machine
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL # computation power type at https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codebuild-project-environment.html#cfn-codebuild-project-environment-certificate
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      Name: FeedbackBuildProject
      QueuedTimeoutInMinutes: '5' # [5, 480]
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${RepositoryName}"
        BuildSpec: !Sub |
          version: 0.2
          env:
            shell: /bin/bash

          phases:
            install:
              on-failure: CONTINUE
              commands:
                - echo "Setting JAVA_HOME to Java 17"
                - export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))  # This sets JAVA_HOME
                - echo $JAVA_HOME
                - echo "Installing dependencies"
                - echo "Checking Java version"
                - java -version
                - mvn -v

            pre_build:
              on-failure: CONTINUE
              commands:
                - echo "Starting the build process"
                - mvn clean validate -q

            build:
              on-failure: CONTINUE
              commands:
                - echo "Compiling the Spring Boot project"
                - mvn clean compile -q

            post_build:
              on-failure: CONTINUE
              commands:
                - echo "Running the test suite"
                - mvn test -q
                - echo "Tests completed"
                - echo "End"
          artifacts:
            files:
              - target/surefire-reports/**
            discard-paths: yes 
      Tags:
        - Key: Name
          Value: FeedbackBuildProject

  CodeBuildFinalRevisionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        - PolicyName: CodeBuildPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*
                  - codecommit:*
                  - ecs:*
                  - s3:*
                  - logs:*
                Resource: "*"


  CodeBuildFinalRevision:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: S3
        Location: !Ref ArtifactStoreBucket  
      ConcurrentBuildLimit: '1'
      Description: Pre deploy build stage
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL  
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      Name: FinalRevisionBuildProject
      QueuedTimeoutInMinutes: '5'
      ServiceRole: !GetAtt CodeBuildFinalRevisionServiceRole.Arn  
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${RepositoryName}"  
        BuildSpec: !Sub |
          version: 0.2

          phases:
            pre_build:
              commands:
                - pwd
                - docker --version
                - ls
                - echo Logging in to Amazon ECR...
                - aws --version
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
                - REPOSITORY_URI=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/spring-boot-app
            build:
              commands:
                - echo "Creating Jacoco report"
                - mvn clean verify
                - aws s3 cp ./target/site/jacoco/jacoco.csv  s3://${BucketName}/jacoco.csv
                - echo "Creating PIT testing report"
                - mvn test-compile org.pitest:pitest-maven:mutationCoverage
                - aws s3 cp ./target/pit-reports/index.html s3://${BucketName}/pit_report.html
                - echo Building the Docker image...
                - docker build -t $REPOSITORY_URI:latest .
                - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:latest
            post_build:
              commands:
                - echo Pushing the Docker images...
                - docker push $REPOSITORY_URI:latest
                - echo Writing image definitions file...
                - echo "[{\"name\":\"spring-boot-app\",\"imageUri\":\"$REPOSITORY_URI:latest\"}]" > imagedefinitions.json
                - echo "imagedefinitions.json file created."
          artifacts:
            files:
              - imagedefinitions.json
      Tags:
        - Key: Name
          Value: FinalRevisionBuildProject


  # ================================================================================================

  # ==== Lambda section ====

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite

  # retrieve the report.txt
  CreateReport:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Code: ./lambdaCode/createReport
      Description: State to create the report from the previus build phase, both commit one and tests execution one will be created
      FunctionName: createReport
      Handler: index.createReport
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Timeout: 120
    DependsOn: LambdaRole

  # create the final pull request
  CreatePullRequest:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Code: ./lambdaCode/createPullRequest
      Description: State to create the final pull request if everything succeeded
      FunctionName: createPullRequest
      Handler: index.createPullRequest
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          REPOSITORY_NAME: !Ref RepositoryName
    DependsOn: LambdaRole

  # check status of the final pull request
  CheckPullRequest:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Code: ./lambdaCode/checkPullRequest
      Description: State to check the final pull request if everything succeeded
      FunctionName: checkPullRequest
      Handler: index.checkPullRequest
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Timeout: 400
      Environment:
        Variables:
          REPOSITORY_NAME: !Ref RepositoryName
    DependsOn: LambdaRole

  # check status of the final pull request
  AdaptOutput:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Code: ./lambdaCode/adaptOutput
      Description: State to adapt the output to the input requirements of Amazon ECS
      FunctionName: adaptOutput
      Handler: index.adaptOutput
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Timeout: 30
    DependsOn: LambdaRole


  # generate test suite
  HandleReport:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Code: ./lambdaCode/handleReport
      Description: State to generate test suite for the given .class file
      FunctionName: handleReport
      Handler: index.handleReport
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - arn:aws:lambda:eu-south-1:344740472567:layer:stepfunctionLambdaLayer:2
      Runtime: python3.10
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
      Timeout: 300
    DependsOn: LambdaRole

  Stats:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Code: ./lambdaCode/stats
      Description: State to generate stats
      FunctionName: stats
      Handler: index.stats
      Role: !GetAtt LambdaRoleStats.Arn
      Runtime: python3.10
      Timeout: 60
    DependsOn: LambdaRoleStats

  LambdaApprovalFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: ./lambdaCode/approval
      Description: Lambda function that callback to AWS Step Functions
      FunctionName: LambdaApprovalFunction
      Handler: index.lambda_handler
      Role: !GetAtt "LambdaApiGatewayIAMRole.Arn"
      Runtime: python3.10
    DependsOn: LambdaApiGatewayIAMRole

  # lambda function to create and send message
  SendEmail:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.sendEmail
      Role: !GetAtt LambdaSendEmailExecutionRole.Arn
      Runtime: python3.10
      FunctionName: sendEmail
      Code: ./lambdaCode/sendEmail
      Timeout: 25
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSHumanApprovalEmailTopic
    DependsOn: LambdaSendEmailExecutionRole

  # lambda function to create and send message
  SendPullRequestEmail:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.sendPullRequestEmail
      Role: !GetAtt LambdaSendEmailExecutionRole.Arn
      Runtime: python3.10
      FunctionName: sendPullRequestEmail
      Code: ./lambdaCode/sendPullRequestEmail
      Timeout: 25
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSHumanApprovalEmailTopic
          REPOSITORY_NAME: !Ref RepositoryName
    DependsOn: LambdaSendEmailExecutionRole

  # allows the API gateway to call the lambda (the post inside the integration) 
  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaApprovalFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExecutionApi}/*"

  # IAM role for the lambda response handling to let produce log and interact with StepFunction
  LambdaApiGatewayIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "states:SendTaskFailure"
                  - "states:SendTaskSuccess"
                Resource: "*"

  LambdaStateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: InvokeCallbackLambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "${SendEmail.Arn}"


  # IAM role to let the lambda send emails using SNS
  LambdaSendEmailExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
        - PolicyName: SNSSendEmailPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "SNS:Publish"
                Resource:
                  - !Sub "${SNSHumanApprovalEmailTopic}"
        - PolicyName: S3FullAccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "codecommit:GetRepository"
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                Resource:
                  - "arn:aws:s3:::*"
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}

  LambdaRoleStats:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CloudWatchLogsInsightsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:StartQuery"
                  - "logs:GetQueryResults"
                Resource: "*"

  # ================================================================================================

  # ==== StepFunction section ====

  # ADDING DEPLOY
  FeedbackStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: FeedbackStateMachine
      DefinitionString: !Sub |
        {
          "Comment": "State machine to handle test generation with feedback",
          "StartAt": "CreateReport",
          "States": {
            "CreateReport":
              {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters":
                  {
                    "FunctionName": "arn:aws:lambda:eu-south-1:344740472567:function:createReport",
                    "Payload": { "bucketname.$": "$.bucketname", "key.$": "$.key", "branch.$": "$.branch" }
                  },
                "ResultSelector": { "Payload.$": "$.Payload" },
                "ResultPath": "$.taskResult",
                "Next": "BuildResultChoice"
              },
            "BuildResultChoice":
              {
                "Type": "Choice",
                "Choices":
                  [
                    {
                      "Variable": "$.buildResult",
                      "StringEquals": "SUCCEEDED",
                      "Next": "HandleReport"
                    },
                    {
                      "Variable": "$.buildResult",
                      "StringEquals": "FAILED",
                      "Next": "SendEmail"
                    }
                  ],
                "Default": "UnknownState"
              },
            "HandleReport":
              {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters":
                  {
                    "Payload.$": "$",
                    "FunctionName": "arn:aws:lambda:eu-south-1:344740472567:function:handleReport"
                  },
                "ResultSelector": { "Payload.$": "$.Payload" },
                "ResultPath": "$.taskResult",
                "Retry":
                  [
                    {
                      "ErrorEquals":
                        [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2,
                      "JitterStrategy": "FULL"
                    }
                  ],
                "Next": "StartBuild"
              },
            "StartBuild": {
                "Type": "Task",
                "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                "Parameters": {
                  "ProjectName": "FeedbackBuildProject",
                  "SourceVersion.$": "$.taskResult.Payload.body.branch"
                },
                "ResultPath": "$.taskResult",
                "Next": "Patch",
                "Catch": [
                  {
                    "ErrorEquals": ["States.TaskFailed"],
                    "ResultPath": "$.taskResult",
                    "Next": "ParseCause"
                  }
                ]
              },
              "ParseCause": {
                  "Type": "Pass",
                  "Parameters": {
                    "bucketname.$": "$.bucketname",
                    "key.$": "$.key",
                    "buildResult.$": "$.buildResult",
                    "Cause.$": "States.StringToJson($.taskResult.Cause)"
                  },
                  "ResultPath": "$.parsedCause",
                  "Next": "ExtractSourceVersion"
                },
                "ExtractSourceVersion": {
                  "Type": "Pass",
                  "Parameters": {
                    "branch.$": "$.parsedCause.Cause.Build.SourceVersion"
                  },
                  "ResultPath": "$.branch",
                  "Next": "SetFailedResult"
                },
              "SetFailedResult": {
                "Type": "Pass",
                "Parameters": {
                  "bucketname.$": "$.bucketname",
                  "key.$": "$.key",
                  "buildResult": "FAILED",
                  "branch.$": "$.branch.branch"
                },
                "ResultPath": "$",
                "Next": "FinalBuild"
              },
              "Patch": {
                "Type": "Pass",
                "Parameters": {
                  "bucketname.$": "$.bucketname",
                  "key.$": "$.key",
                  "buildResult.$": "$.taskResult.Build.BuildStatus",
                  "branch.$": "$.taskResult.Build.SourceVersion"
                },
                "ResultPath": "$",
                "Next": "FinalBuild"
              },
              "FinalBuild": {
                "Type": "Choice",
                  "Choices":
                    [
                      {
                        "Variable": "$.buildResult",
                        "StringEquals": "SUCCEEDED",
                        "Next": "SendPullRequestEmail"
                      },
                      {
                        "Variable": "$.buildResult",
                        "StringEquals": "FAILED",
                        "Next": "CreateReport"
                      }
                    ],
                  "Default": "UnknownState"
              },
              "SendPullRequestEmail":
              {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken",
                "Parameters":
                  {
                    "Payload":
                      {
                        "ExecutionContext.$": "$$",
                        "APIGatewayEndpoint": "https://${ExecutionApi}.execute-api.${AWS::Region}.amazonaws.com/states",
                        "branch.$": "$.branch"
                      },
                    "FunctionName": "arn:aws:lambda:eu-south-1:344740472567:function:sendPullRequestEmail"
                  },
                "ResultPath": "$.mailInfo",
                "Retry":
                  [
                    {
                      "ErrorEquals":
                        [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2,
                      "JitterStrategy": "FULL"
                    }
                  ],
                "Next": "ApprovalPullRequest"
              },
              "ApprovalPullRequest":
              {
                "Type": "Choice",
                "Choices":
                  [
                    {
                      "Variable": "$.mailInfo.Status",
                      "StringEquals": "Approved!",
                      "Next": "CreatePullRequest"
                    },
                    {
                      "Variable": "$.mailInfo.Status",
                      "StringEquals": "Rejected!",
                      "Next": "FailState"
                    }
                  ]
              },
              "CreatePullRequest":
              {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters":
                  {
                    "FunctionName": "arn:aws:lambda:eu-south-1:344740472567:function:createPullRequest",
                    "Payload": { "branch.$": "$.branch" }
                  },
                "ResultPath": "$.taskResult",
                "Retry":
                  [
                    {
                      "ErrorEquals":
                        [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2,
                      "JitterStrategy": "FULL"
                    }
                  ],
                "Next": "WaitForMerge"
              },
              "WaitForMerge": {
                "Type": "Wait",
                "Seconds": 30,
                "Next": "CheckPullRequest"
              },
              "CheckPullRequest":
              {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters":
                  {
                    "FunctionName": "arn:aws:lambda:eu-south-1:344740472567:function:checkPullRequest",
                    "Payload": {
                      "pullRequestId.$": "$.taskResult.Payload.pullRequestId"
                    }
                  },
                "ResultPath": "$.prCheckResult",
                "Retry":
                  [
                    {
                      "ErrorEquals":
                        [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2,
                      "JitterStrategy": "FULL"
                    }
                  ],
                "Next": "IsPRMerged"
              },
              "IsPRMerged": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.prCheckResult.Payload.result",
                    "StringEquals": "Merged",
                    "Next": "StartFinalBuild"
                  },
                  {
                    "Variable": "$.prCheckResult.Payload.result",
                    "StringEquals": "NotMerged",
                    "Next": "WaitForMerge"
                  }
                ],
                "Default": "FailState"
              },
              "StartFinalBuild": {
                "Type": "Task",
                "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                "Parameters": {
                  "ProjectName": "FinalRevisionBuildProject",
                  "SourceVersion": "refs/heads/master"
                },
                "Next": "AdaptOutput",
                "Catch": [
                  {
                    "ErrorEquals": ["States.TaskFailed"],
                    "ResultPath": "$.taskResult",
                    "Next": "FailState"
                  }
                ]
              },

            "AdaptOutput": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters":
                  {
                    "FunctionName": "arn:aws:lambda:eu-south-1:344740472567:function:adaptOutput"
                  },
                "Next": "Ending"
            },
            "SendEmail":
              {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken",
                "Parameters":
                  {
                    "Payload":
                      {
                        "ExecutionContext.$": "$$",
                        "APIGatewayEndpoint": "https://${ExecutionApi}.execute-api.${AWS::Region}.amazonaws.com/states",
                        "Report.$": "$.taskResult.Payload.body"
                      },
                    "FunctionName": "arn:aws:lambda:eu-south-1:344740472567:function:sendEmail"
                  },
                "ResultPath": "$.mailInfo",
                "Retry":
                  [
                    {
                      "ErrorEquals":
                        [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2,
                      "JitterStrategy": "FULL"
                    }
                  ],
                "Next": "ManualApprovalChoiceState"
              },
            "ManualApprovalChoiceState":
              {
                "Type": "Choice",
                "Choices":
                  [
                    {
                      "Variable": "$.mailInfo.Status",
                      "StringEquals": "Approved!",
                      "Next": "HandleReport"
                    },
                    {
                      "Variable": "$.mailInfo.Status",
                      "StringEquals": "Rejected!",
                      "Next": "FailState"
                    },
                    {
                      "Variable": "$.mailInfo.Status",
                      "StringEquals": "Manual!",
                      "Next": "FormatOutputState"
                    }
                  ]
              },
              "FormatOutputState": {
                "Type": "Pass",
                "Parameters": {
                  "bucketname.$": "$.bucketname",
                  "key.$": "$.key",
                  "buildResult.$": "$.buildResult",
                  "branch.$": "$.branch",
                  "taskResult": {
                    "Payload": {
                      "statusCode": 200,
                      "body": {
                        "message": "Manual approval",
                        "branch.$": "$.branch"
                      }
                    }
                  }
                },
                "ResultPath": "$",
                "Next": "StartBuild"
            },
            "Ending": { 
              "Type": "Pass", 
              "OutputPath": "$.Payload",
              "End": true
            },
            "UnknownState":
              {
                "Type": "Fail",
                "Error": "UnknownBuildStatus",
                "Cause": "The build returned an unknown status."
              },
            "FailState":
              {
                "Type": "Fail",
                "Error": "Pipeline failed",
                "Cause": "The pipeline failed due to user's choice"
              }
          }
        }
      RoleArn: !GetAtt StepFunctionRole.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL

  StepFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/stepfunctions/FeedbackStateMachineLogs
      RetentionInDays: 3



  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonS3ObjectLambdaExecutionRolePolicy
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  # # ================================================================================================

  # ====  API gateway section ====

  # Begin API Gateway Resources
  # the actual RestApi component in AWS
  ExecutionApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "Human approval endpoint"
      Description: "HTTP Endpoint backed by API Gateway and Lambda"
      FailOnWarnings: true

  # API Gateway methods that define the parameters and body that clients must send in their requests.
  ExecutionMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE # no protection
      HttpMethod: GET         # http method 
      Integration:            # how the request is forwarded to the backend, in this case a lambda function
        Type: AWS
        IntegrationHttpMethod: POST   # the gateway will POST on the lambda
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApprovalFunction.Arn}/invocations" # lambda uri
        IntegrationResponses: 
          - StatusCode: 302
            ResponseParameters:
              method.response.header.Location: "integration.response.body.headers.Location"
        RequestTemplates:
          application/json: | # converts http packet into a json object if it's an application/json one
            {
              "body" : $input.json('$'),
              "headers": {
                #foreach($header in $input.params().header.keySet())
                "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end

                #end
              },
              "method": "$context.httpMethod",
              "params": {
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end

                #end
              },
              "query": {
                #foreach($queryParam in $input.params().querystring.keySet())
                "$queryParam": "$util.escapeJavaScript($input.params().querystring.get($queryParam))" #if($foreach.hasNext),#end

                #end
              }  
            }
      ResourceId: !Ref ExecutionResource  #
      RestApiId: !Ref ExecutionApi        # link to the API gateway model created
      MethodResponses:
        - StatusCode: 302
          ResponseParameters:
            method.response.header.Location: true


  ExecutionResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ExecutionApi
      ParentId: !GetAtt "ExecutionApi.RootResourceId" # says that the parent is going to be the root '/'
      PathPart: execution   # into the ExecutionApi the route /execution is going to be created 

  # deploys an API Gateway RestApi resource to a stage so that clients can call the API over the internet. The stage acts as an environment.
  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - ExecutionMethod
    Properties:
      RestApiId: !Ref ExecutionApi
      StageName: DevStage

  # configuring AWS Cloud Watch
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayCloudWatchLogsRole.Arn"
  
  # IAM role for Cloud Watch
  ApiGatewayCloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"

  ExecutionApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref ExecutionApi
      StageName: states

  # ================================================================================================

  # ====  SNS section ====

  SNSHumanApprovalEmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        -
           Endpoint: !Sub ${Email}
           Protocol: email

  # ================================================================================================

  # ====  VPC section ====

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.0.0.0/20'
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !GetAtt CodePipelineServiceRole.Arn
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: CustomEcsTaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:*
                Resource: '*'


  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'spring-boot-app'

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'apis'
      RetentionInDays: 1

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup      
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: for ECS containers
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: spring-boot-app
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: backend-service
          Image: "344740472567.dkr.ecr.eu-south-1.amazonaws.com/spring-boot-app"
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: DB_HOST
              Value: "postgres-db"
            - Name: DB_PORT
              Value: "5432"
            - Name: DB_USER
              Value: "myuser"
            - Name: DB_PASSWORD
              Value: "mypassword"
            - Name: DB_NAME
              Value: "demo_db"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-stream-prefix: ecs

        - Name: postgres-db
          Image: "postgres:latest"
          PortMappings:
            - ContainerPort: 5432
          Environment:
            - Name: POSTGRES_PASSWORD
              Value: "mypassword"
            - Name: POSTGRES_USER
              Value: "myuser"
            - Name: POSTGRES_DB
              Value: "demo_db"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-stream-prefix: postgres

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: backend-service
      TaskDefinition: !Ref Task
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 70
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
          SecurityGroups:
            - !Ref ContainerSecurityGroup



  # ================================================================================================

  # ==== EC2 section ====

  # image ids catalog: https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#AMICatalog:

  # EC2KeyPair:
  #   Type: AWS::EC2::KeyPair
  #   Properties:
  #     KeyName: MyExistingKeyPair
  #     KeyType: rsa
  #     PublicKeyMaterial: |
  #       ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDpAyflDIY/ZAUllirdQEnsoqHk2F4Lbe+khl3ZFDiYQx2eVOrmHL+lMZDiEun19FQCBB7qBHihTBOmUzR3kRJeebe6StbBD5+/SEMSQ+RQank97RHNk+6wR6WpLIHeTUgBV9jpPuXbxeORiSkFjABwvkP1LqqXfChxjygiWIW47gWXFiN4EycTXVpPY7uVtAQHkLb6DVFbyQ0f6Rn1q+AyeGopTvZ1ipgQAf/E9FwS0fe7FqBCNKwvquhOFBhEG6IkknxIUq0PB/f1Bzsr2dC4DkcUbWAcCre3cpsoDl0jSS3ubtDd6UszbfwkgfLZbh36HuIzowGTJI56MCUc9jj93nHt83YVjW3TpKSXBd0MEDnbVrs2veh0yvmsC59y+merXeJkPgk7dRvLV3/Z0SqNxW0Fimjj7X/re9gLRDC5jJWk770cCpMfiEEaXFbMZ+z3XWv1bmW+z7pKGejh24SE1ABKGMEl3z+xYxMgD46NGO6bkTM7s0zkc+cNRXTug7c= francesco@laptop

  # # link the instance to the role
  # EC2InstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - !Ref EC2InstanceRole

  # # IAM Role for EC2
  # EC2InstanceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ec2.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy 
  #       - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  #     Policies:
  #       - PolicyName: EC2S3Access
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - s3:*
  #               Resource:
  #                 - !Sub arn:aws:s3:::${BucketName}/*
  #                 - "*"

  # # EC2 instance declaration
  # EC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: ami-012d51171727a42bb
  #     InstanceType: !Ref InstanceTypeValue
  #     KeyName: !Ref EC2KeyPair
  #     IamInstanceProfile: !Ref EC2InstanceProfile
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: 'true'
  #         DeviceIndex: '0'
  #         SubnetId: !Ref SubnetInstance
  #         GroupSet:
  #           - !Ref MySecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: !Ref InstanceName

  # # ================================================================================================

  # # ==== CodeDeploy section ====

  # # IAM Role
  # CodeDeployServiceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: codedeploy.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #     - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  #     Policies:
  #       - PolicyName: CodeDeployS3Access
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - s3:*
  #               Resource:
  #                 - !Sub arn:aws:s3:::${BucketName}/*
  #                 - "*"

  # # declaring the application instance
  # CodeDeployApplicationInstance:
  #   Type: AWS::CodeDeploy::Application
  #   Properties:
  #     ApplicationName: !Ref ApplicationName
  #     ComputePlatform: Server

  # # declaring general information about deployment
  # CodeDeployDeploymentGroupInstance:
  #   Type: AWS::CodeDeploy::DeploymentGroup
  #   DependsOn: CodeDeployApplicationInstance
  #   Properties:
  #     ApplicationName: !Ref ApplicationName 
  #     DeploymentGroupName: !Ref DeploymentGroupName
  #     ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
  #     DeploymentStyle:
  #       DeploymentType: IN_PLACE
  #       DeploymentOption: WITHOUT_TRAFFIC_CONTROL
  #     DeploymentConfigName: CodeDeployDefault.OneAtATime # https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html
  #     Ec2TagFilters:
  #       - Key: Name
  #         Value: !Ref InstanceName    # application must be ran on this instance with (key, name) matching
  #         Type: KEY_AND_VALUE
  #     AutoRollbackConfiguration:
  #       Enabled: true
  #       Events:
  #         - DEPLOYMENT_FAILURE
  #         - DEPLOYMENT_STOP_ON_REQUEST

  # ================================================================================================
  
# Outputs:
#   # EC2InstancePublicIP:
#   #   Description: Public IP of the EC2 instance
#   #   Value: !GetAtt EC2Instance.PublicIp

#   # EC2InstanceID:
#   #   Description: ID of the EC2 instance
#   #   Value: !Ref EC2Instance

#   # EC2InstanceRole:
#   #   Description: IAM Role attached to the EC2 instance
#   #   Value: !Ref EC2InstanceRole

#   # CodeDeployApplicationName:
#   #   Description: CodeDeploy Application Name
#   #   Value: !Ref ApplicationName

#   # CodeDeployDeploymentGroup:
#   #   Description: CodeDeploy Deployment Group Name
#   #   Value: !Ref DeploymentGroupName

#   CodeBuildInstanceOutput:
#     Description: Instance of the CodeBuild project
#     Value: !Ref CodeBuildInstance

#   CodePipelineInstanceOutput:
#     Description: Instance of the Pipeline
#     Value: !Ref PipelineInstance

#   StateMachineInstanceOutput:
#     Description: Instance of the feedback state machine
#     Value: !Ref FeedbackStateMachine

#   SNSHumanApprovalEmailTopicArn:
#     Description: ARN of the SNS Topic for human approval emails
#     Value: !Ref SNSHumanApprovalEmailTopic
#     Export:
#       Name: SNSHumanApprovalEmailTopicArn
